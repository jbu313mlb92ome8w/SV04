#https://github.com/Klipper3d/klipper/pull/5897/files

#######################################################################
# Helper script to park the carriage (called from T0 and T1 macros)
#######################################################################

# Macros to park the extruders and set them into a safe state
[gcode_macro _PARK_extruder]
gcode:
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park0

      {% if printer["gcode_macro M106"].swap_speed != -1 %}
        SET_FAN_SPEED FAN=extruder_parts SPEED=0
      {% endif %}

      #added so macro can be called seperately
      {% if printer.toolhead.extruder != 'extruder' %}
        T0
      {% endif %}
      #

      G90

      #original from grigi github
      #G1 X0 F7200
      #

      #manual park location
      #G1 X-62 F7200
      #added to auto update park location
      G1 X{ printer['configfile'].config["stepper_x"].position_endstop } F5000
      #      

      RESTORE_GCODE_STATE NAME=park0
    {% endif %}

[gcode_macro _PARK_extruder1]
gcode:
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park1

      {% if printer["gcode_macro M106"].swap_speed != -1 %}
        SET_FAN_SPEED FAN=extruder1_parts SPEED=0
      {% endif %}

      #added so macro can be called seperately
      {% if printer.toolhead.extruder != 'extruder1' %}
        T1
      {% endif %}
      #

      G90

      #original from grigi github
      #G1 X20 F7200
      #

      #manual park location
      #G1 X362 F7200
      #added to auto update park location
      G1 X{ printer['configfile'].config["dual_carriage"].position_endstop } F5000
      #

      RESTORE_GCODE_STATE NAME=park1
    {% endif %}

# Macros to change toolheads
[gcode_macro T0]
variable_offset_applied: 0
gcode:
    # Only do anything if the current tool is not T0
    {% if printer.toolhead.extruder != 'extruder' %}
      {% set svv = printer.save_variables.variables %}

      {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=extruder_parts SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic extruder_parts"].speed * 255}
      {% endif %}

      _PARK_{printer.toolhead.extruder}

      ACTIVATE_EXTRUDER EXTRUDER=extruder
      SET_DUAL_CARRIAGE CARRIAGE=0
      {% if printer["gcode_macro T0"].offset_applied == 1 %}
        SET_GCODE_OFFSET X_ADJUST={ -svv.xoffset } Y_ADJUST={ -svv.yoffset } Z_ADJUST={ -svv.zoffset }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
      {% endif %}
      # SET_INPUT_SHAPER SHAPER_FREQ_X=60 SHAPER_TYPE_X=mzv
      #max accel 7000
      SET_INPUT_SHAPER SHAPER_FREQ_X=61.4 SHAPER_TYPE_X=ei
    {% endif %}

[gcode_macro T1]
gcode:
    # Only do anything if the current tool is not T1
    {% if printer.toolhead.extruder != 'extruder1' %}
      {% set svv = printer.save_variables.variables %}

      {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=extruder1_parts SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic extruder1_parts"].speed * 255}
      {% endif %}

      _PARK_{printer.toolhead.extruder}

      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      SET_DUAL_CARRIAGE CARRIAGE=1
      {% if printer["gcode_macro T0"].offset_applied == 0 %}
        SET_GCODE_OFFSET X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset } Z_ADJUST={ svv.zoffset }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
      {% endif %}
      # SET_INPUT_SHAPER SHAPER_FREQ_X=60 SHAPER_TYPE_X=mzv
      #max accel 7300
      SET_INPUT_SHAPER SHAPER_FREQ_X=49.8 SHAPER_TYPE_X=mzv
    {% endif %}

#######################################################################
# Tool alignment Calibration
#######################################################################

# YOU MUST CALIBRATE YOUR ROTATION_DISTANCE BEFORE THIS IS USEFUL!!!
# Configure this to draw 2 line segments perpendicular to the dual_carraige
# axis that meet in the middle of the bed. Both lines should have the same
# coordinate on the axis of the dual_carraige. If they don't print inline,
# adjust your endstop settings.
[gcode_macro SET_SEPARATION]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|default(0.0)|float %}
    {% set oldY = svv.yoffset|default(0.0)|float %}
    {% set oldZ = svv.zoffset|default(0.0)|float %}

    {% if params.X is defined %}
      SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
      SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
      SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
      {% set newX = params.X_ADJUST|float + oldX %}
      SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
      {% set newY = params.Y_ADJUST|float + oldY %}
      SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
      {% set newZ = params.Z_ADJUST|float + oldZ %}
      SAVE_VARIABLE VARIABLE=zoffset VALUE={ newZ }
    {% endif %}

# Prints the separation to the console, will only work if you have the
# [respond] config section.
[gcode_macro GET_SEPARATION]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set svvX = svv.xoffset|default(0.0)|float %}
    {% set svvY = svv.yoffset|default(0.0)|float %}
    {% set svvZ = svv.zoffset|default(0.0)|float %}

    M118 xoffset: { svvX }  yoffset: { svvY }  zoffset: { svvZ }

[gcode_macro CALIBRATE_SEPARATION]
gcode:
    G28
    G90
    M83
    G1 Z30 F1800

    # Prime nozzles
    T0
    G1 E10 F120
    T1
    G1 E10 F120

    # X axis alignment
    T0 ; test T0
    G1 E5 F120
    G1 X120 Y130 F4800
    G1 Z.3 F1800
    G1 Y70 E10
    G1 Y130
    G1 Z30
    G1 E-2 F1800

    T1 ; test T1
    G1 E5 F120
    G1 X120 Y10 F4800
    G1 Z.3 F1800
    G1 Y70 E10
    G1 Y10
    G1 Z30
    G1 E-2 F1800

    # Y axis alignment
    T0 ; test T0
    G1 E5 F120
    G1 X10 Y150 Z.3 F4800
    G1 Z.3 F1800
    G1 X70 E10
    G1 X10
    G1 Z30
    G1 E-2 F1800

    T1 ; test T1
    G1 E5 F120
    G1 X130 Y150 F4800
    G1 Z.3 F1800
    G1 X70 E10
    G1 X130
    G1 Z30
    G1 E-2 F1800

#changed the name of the fans from what grigi had to something i like better
[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == -1 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off all fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=extruder_parts SPEED=0
        SET_FAN_SPEED FAN=extruder1_parts SPEED=0
      {% else %}
        # Opt into fan speed swap control
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
        SET_FAN_SPEED FAN={printer.toolhead.extruder}_parts SPEED={speed}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=extruder_parts SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=extruder1_parts SPEED={speed}
      {% endif %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}

#######################################################################
# Variables
#######################################################################
# These IDEX scripts depend on [save_variables] being defined.

[save_variables]
filename: ~/printer_data/config/variables.klip
# This is used for saving and restoring the idex offsets
# To create the IDEX variables execute:
#   SET_SEPARATION X=0 Y=0 Z=0
